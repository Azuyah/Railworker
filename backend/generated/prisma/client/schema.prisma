// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  phone    String?
  company  String?
  role     String  @default("TSM")

  firstName String?
  lastName  String?
  signature String?

  projects   Project[]
  employees  Employee[] @relation("Employer")
  employerOf Employee[] @relation("Employee")

  createdRows  Row[] @relation("CreatedRows") // TSM-rader
  approvedRows Row[] @relation("RowApprovedBy") // HTSM-godk√§nda rader
}

model Project {
  id            Int          @id @default(autoincrement())
  name          String
  userId        Int?
  user          User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt     DateTime     @default(now())
  startDate     String
  startTime     String
  endDate       String
  endTime       String
  plats         String
  namn          String
  telefonnummer String
  sections      Section[]
  beteckningar  Beteckning[]
  rows          Json?
  anteckningar  Json?
  tsmRows       Row[]
}

model Section {
  id        Int     @id @default(autoincrement())
  name      String
  type      String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  rows      Row[]
}

model Beteckning {
  id        Int     @id @default(autoincrement())
  label     String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

model Employee {
  id         Int  @id @default(autoincrement())
  employer   User @relation("Employer", fields: [employerId], references: [id])
  employerId Int
  employee   User @relation("Employee", fields: [employeeId], references: [id])
  employeeId Int

  @@unique([employerId, employeeId])
}

model Row {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  user   User? @relation("CreatedRows", fields: [userId], references: [id])
  userId Int?

  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId Int?

  anordning String[]
  datum     String?

  isPending    Boolean @default(false)
  approvedBy   User?   @relation("RowApprovedBy", fields: [approvedById], references: [id])
  approvedById Int?

  createdAt DateTime @default(now())
}
